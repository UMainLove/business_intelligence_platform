name: Kubernetes Infrastructure Tests

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'k8s/**'
      - 'tests/infrastructure/**'
      - '.github/workflows/k8s-infrastructure.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'k8s/**'
      - 'tests/infrastructure/**'
      - '.github/workflows/k8s-infrastructure.yml'

jobs:
  k8s-tests:
    name: K8s Infrastructure TDD Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    
    steps:
    - uses: actions/checkout@v5
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install -r requirements.txt
        pip install pytest pytest-cov
    
    - name: Set up test environment
      run: |
        mkdir -p data logs
        cp .env.example .env
        echo "" >> .env
        echo "ANTHROPIC_API_KEY=test-key-12345" >> .env
        echo "ENVIRONMENT=test" >> .env
        echo "DATABASE_URL=postgresql://test_user:test_password@localhost:5432/test_bi" >> .env
        echo "REDIS_URL=redis://localhost:6379/0" >> .env
    
    - name: Validate K8s manifests
      run: |
        echo "üîç Validating Kubernetes manifests..."
        for file in k8s/*.yaml; do
          echo "Checking $file..."
          python -c "import yaml; yaml.safe_load_all(open('$file'))" || exit 1
        done
        echo "‚úÖ All K8s manifests are valid YAML"
    
    - name: Run infrastructure TDD tests
      run: |
        python -m pytest tests/infrastructure/ -v --tb=short --junitxml=junit-k8s.xml
      env:
        ANTHROPIC_API_KEY: test-key-12345
        ENVIRONMENT: test
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_bi
        REDIS_URL: redis://localhost:6379/0
    
    - name: Check HPA configuration
      run: |
        echo "üìä HPA Configuration:"
        python -c "
        import yaml
        with open('k8s/hpa.yaml') as f:
            hpa = yaml.safe_load(f)
            spec = hpa['spec']
            print(f'  - Min Replicas: {spec[\"minReplicas\"]}')
            print(f'  - Max Replicas: {spec[\"maxReplicas\"]}')
            print(f'  - CPU Target: {spec[\"metrics\"][0][\"resource\"][\"target\"][\"averageUtilization\"]}%')
        "
    
    - name: Check deployment resources
      run: |
        echo "üì¶ Deployment Resources:"
        python -c "
        import yaml
        with open('k8s/deployment.yaml') as f:
            docs = list(yaml.safe_load_all(f))
            for doc in docs:
                if doc and doc.get('kind') == 'Deployment':
                    resources = doc['spec']['template']['spec']['containers'][0]['resources']
                    print(f'  - CPU: {resources[\"requests\"][\"cpu\"]} - {resources[\"limits\"][\"cpu\"]}')
                    print(f'  - Memory: {resources[\"requests\"][\"memory\"]} - {resources[\"limits\"][\"memory\"]}')
                    break
        "
    
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: k8s-test-results-${{ matrix.python-version }}
        path: junit-k8s.xml

  k8s-manifest-security:
    name: K8s Manifest Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v5
    
    - name: Run Kubesec scan
      run: |
        echo "üîí Scanning K8s manifests for security issues..."
        for file in k8s/*.yaml; do
          if [[ "$file" != *"namespace.yaml"* ]] && [[ "$file" != *"README.md"* ]]; then
            echo "Scanning $file..."
            docker run -v $(pwd):/app kubesec/kubesec:latest scan /app/$file || true
          fi
        done
    
    - name: Check for security best practices
      run: |
        echo "üõ°Ô∏è Checking security best practices..."
        
        # Check for non-root containers
        grep -l "runAsNonRoot: true" k8s/*.yaml || echo "‚ö†Ô∏è  Warning: Some manifests don't enforce non-root containers"
        
        # Check for read-only root filesystem
        grep -l "readOnlyRootFilesystem: true" k8s/*.yaml || echo "‚ö†Ô∏è  Warning: Some containers don't use read-only root filesystem"
        
        # Check for resource limits
        grep -l "limits:" k8s/deployment.yaml || echo "‚ùå Error: No resource limits defined"
        
        echo "‚úÖ Security check completed"

  notify:
    name: Notification
    needs: [k8s-tests, k8s-manifest-security]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Summary
      run: |
        echo "üìã Kubernetes Infrastructure Test Summary"
        echo "========================================="
        echo "‚ò∏Ô∏è  TDD Tests: ${{ needs.k8s-tests.result }}"
        echo "üîí Security Scan: ${{ needs.k8s-manifest-security.result }}"
        echo ""
        if [[ "${{ needs.k8s-tests.result }}" == "success" ]] && [[ "${{ needs.k8s-manifest-security.result }}" == "success" ]]; then
          echo "‚úÖ All Kubernetes infrastructure checks passed!"
          echo "üìä Test Coverage: 9 TDD tests for auto-scaling"
          echo "üéØ Features Validated:"
          echo "  - HPA configuration (min: 2, max: 10, target: 70% CPU)"
          echo "  - Resource limits and requests"
          echo "  - Pod scaling under load"
          echo "  - Metrics server integration"
          echo "  - Event logging and auditing"
        else
          echo "‚ùå Some checks failed. Please review the logs."
        fi