name: Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scan daily at 2 AM UTC
    - cron: '0 2 * * *'

permissions:
  contents: read
  security-events: write

jobs:
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install safety pip-audit
    
    - name: Run Safety check
      run: |
        safety check --json --output safety-report.json
        safety check --short-report
      continue-on-error: true
    
    - name: Run pip-audit
      run: |
        pip-audit --format=json --output=pip-audit-report.json
        pip-audit --format=cyclonedx-json --output=sbom.json
      continue-on-error: true
    
    - name: Upload vulnerability reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: vulnerability-reports
        path: |
          safety-report.json
          pip-audit-report.json
          sbom.json

  code-scan:
    name: Static Code Analysis
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit[toml] semgrep
    
    - name: Run Bandit
      run: |
        bandit -r src/ -f json -o bandit-report.json
        bandit -r src/ --severity-level medium
      continue-on-error: true
    
    - name: Run Semgrep
      run: |
        semgrep --config=auto src/ --json --output=semgrep-report.json
        semgrep --config=auto src/ --severity=ERROR
      continue-on-error: true
    
    - name: Upload scan reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: code-scan-reports
        path: |
          bandit-report.json
          semgrep-report.json

  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Build Docker image
      run: |
        docker build -t bi-security-scan:latest .
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'bi-security-scan:latest'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Run container security scan
      run: |
        # Additional container security checks
        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
          -v $(pwd):/workspace \
          aquasec/trivy image bi-security-scan:latest \
          --severity HIGH,CRITICAL \
          --format json \
          --output /workspace/container-scan-results.json
      continue-on-error: true
    
    - name: Upload container scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: container-scan-results
        path: container-scan-results.json

  secrets-scan:
    name: Secrets Detection
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: TruffleHog OSS
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

  compliance-check:
    name: Compliance & License Check
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pip-licenses licensecheck
    
    - name: Check licenses
      run: |
        pip-licenses --format=json --output-file=license-report.json
        pip-licenses --summary --format=markdown > LICENSE-SUMMARY.md
        
        # Check for problematic licenses
        pip-licenses --fail-on="GPL"
        licensecheck --zero
      continue-on-error: true
    
    - name: Upload license reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: license-reports
        path: |
          license-report.json
          LICENSE-SUMMARY.md

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [dependency-scan, code-scan, container-scan, secrets-scan, compliance-check]
    if: always()
    
    steps:
    - name: Download all reports
      uses: actions/download-artifact@v4
      
    - name: Generate security summary
      run: |
        echo "# Security Scan Summary" > security-summary.md
        echo "Generated on: $(date)" >> security-summary.md
        echo "" >> security-summary.md
        
        echo "## Scan Results" >> security-summary.md
        echo "- **Dependency Scan**: ${{ needs.dependency-scan.result }}" >> security-summary.md
        echo "- **Code Analysis**: ${{ needs.code-scan.result }}" >> security-summary.md
        echo "- **Container Scan**: ${{ needs.container-scan.result }}" >> security-summary.md
        echo "- **Secrets Detection**: ${{ needs.secrets-scan.result }}" >> security-summary.md
        echo "- **License Check**: ${{ needs.compliance-check.result }}" >> security-summary.md
        echo "" >> security-summary.md
        
        if [ "${{ needs.dependency-scan.result }}" = "success" ] && \
           [ "${{ needs.code-scan.result }}" = "success" ] && \
           [ "${{ needs.container-scan.result }}" = "success" ] && \
           [ "${{ needs.secrets-scan.result }}" = "success" ] && \
           [ "${{ needs.compliance-check.result }}" = "success" ]; then
          echo "✅ **Overall Status: PASSED**" >> security-summary.md
          echo "All security checks completed successfully." >> security-summary.md
        else
          echo "❌ **Overall Status: FAILED**" >> security-summary.md
          echo "Some security checks failed. Please review the detailed reports." >> security-summary.md
        fi
        
        cat security-summary.md
    
    - name: Upload security summary
      uses: actions/upload-artifact@v4
      with:
        name: security-summary
        path: security-summary.md