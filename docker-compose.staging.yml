services:
  # PostgreSQL Database with Production Settings
  postgres:
    image: postgres:16-alpine
    container_name: staging_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: business_intelligence
      POSTGRES_USER: bi_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U bi_user -d business_intelligence"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    networks:
      - bi_network
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /var/run/postgresql

  # Redis Cache with Production Settings
  redis:
    image: redis:7-alpine
    container_name: staging_redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD} --maxmemory 256mb --maxmemory-policy allkeys-lru --save 900 1 --save 300 10
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'
    networks:
      - bi_network
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp

  # Business Intelligence Application (Alpine-secured)
  bi-app:
    build:
      context: .
      dockerfile: Dockerfile
    image: business-intelligence:staging
    container_name: staging_bi_app
    restart: unless-stopped
    environment:
      ENVIRONMENT: staging
      DATABASE_URL: postgresql://bi_user:${POSTGRES_PASSWORD}@postgres:5432/business_intelligence
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      ANTHROPIC_MODEL_SPECIALISTS: ${ANTHROPIC_MODEL_SPECIALISTS:-claude-3-5-sonnet-20241022}
      ANTHROPIC_MODEL_SYNTH: ${ANTHROPIC_MODEL_SYNTH:-claude-3-5-sonnet-20241022}
      ANTHROPIC_MODEL_MEMORY: ${ANTHROPIC_MODEL_MEMORY:-claude-3-5-haiku-20241022}
      MAX_TOKENS_SPECIALISTS: ${MAX_TOKENS_SPECIALISTS:-8192}
      MAX_TOKENS_SYNTH: ${MAX_TOKENS_SYNTH:-8192}
      MAX_TOKENS_MEMORY: ${MAX_TOKENS_MEMORY:-4096}
      TEMPERATURE_ECONOMIST: ${TEMPERATURE_ECONOMIST:-0.3}
      TEMPERATURE_LAWYER: ${TEMPERATURE_LAWYER:-0.2}
      TEMPERATURE_SOCIOLOGIST: ${TEMPERATURE_SOCIOLOGIST:-0.4}
      TEMPERATURE_SYNTH: ${TEMPERATURE_SYNTH:-0.5}
      TEMPERATURE_MEMORY: ${TEMPERATURE_MEMORY:-0.3}
      TOP_P: ${TOP_P:-0.95}
      TOP_K: ${TOP_K:-40}
    volumes:
      - app_data:/app/data
      - app_logs:/app/logs
    ports:
      - "8501:8501"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    networks:
      - bi_network
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /app/tmp
      - /.streamlit
    user: "10014:10014"

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:v2.40.0
    container_name: staging_prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=10GB'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    depends_on:
      - bi-app
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    networks:
      - bi_network
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
    user: "65534:65534"

  # Grafana Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: staging_grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_ANALYTICS_REPORTING_ENABLED: false
      GF_ANALYTICS_CHECK_FOR_UPDATES: false
      GF_USERS_ALLOW_SIGN_UP: false
      GF_INSTALL_PLUGINS: grafana-piechart-panel,grafana-clock-panel
      GF_SERVER_ROOT_URL: http://localhost:3000
      GF_LOG_LEVEL: info
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    ports:
      - "3000:3000"
    depends_on:
      prometheus:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    networks:
      - bi_network
    security_opt:
      - no-new-privileges:true
    user: "472:472"

  # AlertManager for Production Alerts
  alertmanager:
    image: prom/alertmanager:v0.25.0
    container_name: staging_alertmanager
    restart: unless-stopped
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--data.retention=72h'
      - '--web.external-url=http://localhost:9093'
      - '--cluster.listen-address='
    volumes:
      - ./monitoring/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - alertmanager_data:/alertmanager
    ports:
      - "9093:9093"
    depends_on:
      prometheus:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9093/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'
    networks:
      - bi_network
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
    user: "65534:65534"

  # NGINX Reverse Proxy for Production
  nginx:
    image: nginx:alpine
    container_name: staging_nginx
    restart: unless-stopped
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/staging.conf:/etc/nginx/conf.d/default.conf:ro
      - nginx_logs:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      bi-app:
        condition: service_healthy
      grafana:
        condition: service_healthy
      prometheus:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 64M
          cpus: '0.1'
    networks:
      - bi_network
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /var/cache/nginx
      - /var/run
    user: "101:101"

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_data:
    driver: local
  app_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  alertmanager_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  bi_network:
    driver: bridge