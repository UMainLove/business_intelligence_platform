# Docker Compose for Business Intelligence Platform
version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: bi-postgres
    environment:
      POSTGRES_DB: business_intelligence
      POSTGRES_USER: bi_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-bi_password_change_in_prod}
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - bi-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U bi_user -d business_intelligence"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: bi-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password_change_in_prod}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - bi-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Business Intelligence App
  bi-app:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: bi-app
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://bi_user:${POSTGRES_PASSWORD:-bi_password_change_in_prod}@postgres:5432/business_intelligence
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_password_change_in_prod}@redis:6379/0
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - ANTHROPIC_MODEL_SPECIALISTS=${ANTHROPIC_MODEL_SPECIALISTS:-claude-sonnet-4-20250514}
      - ANTHROPIC_MODEL_SYNTH=${ANTHROPIC_MODEL_SYNTH:-claude-3-7-sonnet-20250219}
      - ANTHROPIC_MODEL_MEMORY=${ANTHROPIC_MODEL_MEMORY:-claude-3-5-haiku-20241022}
    ports:
      - "8501:8501"
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - bi-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8501/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Load Balancer (Optional)
  nginx:
    image: nginx:alpine
    container_name: bi-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - bi-app
    networks:
      - bi-network
    restart: unless-stopped

  # Monitoring (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: bi-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - bi-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: bi-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin_change_in_prod}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - bi-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  bi-network:
    driver: bridge