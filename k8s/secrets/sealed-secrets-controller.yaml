---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: sealed-secrets-controller
  namespace: kube-system
  labels:
    app: sealed-secrets-controller
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: sealed-secrets-controller
  labels:
    app: sealed-secrets-controller
rules:
# Minimal permissions for Sealed Secrets Controller
# Secret management is delegated to namespace-specific Roles only
- apiGroups: ["bitnami.com"]
  resources: ["sealedsecrets"]
  verbs: ["get", "list", "watch", "update", "patch"]
- apiGroups: ["bitnami.com"]
  resources: ["sealedsecrets/status"]
  verbs: ["update", "patch"]
- apiGroups: [""]
  resources: ["events"]
  verbs: ["create", "patch"]
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["get", "list"]
  # Required to validate namespace existence for SealedSecret processing
---
# ClusterRoleBinding for cluster-wide resources (namespaces, sealedsecrets CRD)
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: sealed-secrets-controller
  labels:
    app: sealed-secrets-controller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: sealed-secrets-controller
subjects:
- kind: ServiceAccount
  name: sealed-secrets-controller
  namespace: kube-system
---
# Additional Role for namespace-specific secret management
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: sealed-secrets-secret-manager
  namespace: business-intelligence
  labels:
    app: sealed-secrets-controller
rules:
# Namespace-specific secret management with restricted verbs
# Only essential operations for Sealed Secrets decryption
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list", "create", "update", "patch"]
  resourceNames: ["bi-secrets", "sealed-secret-key"]  # Restrict to specific secrets only
  # Note: 'delete' removed - controller should not delete secrets
- apiGroups: ["bitnami.com"]
  resources: ["sealedsecrets"]
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: sealed-secrets-secret-manager
  namespace: business-intelligence
  labels:
    app: sealed-secrets-controller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: sealed-secrets-secret-manager
subjects:
- kind: ServiceAccount
  name: sealed-secrets-controller
  namespace: kube-system
---
# Role for monitoring namespace (separate from business-intelligence)
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: sealed-secrets-secret-manager
  namespace: monitoring
  labels:
    app: sealed-secrets-controller
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list", "create", "update", "patch"]
  resourceNames: ["monitoring-secrets", "grafana-secrets", "prometheus-secrets"]  # Restrict to specific secrets only
  # Monitoring secrets are managed by Sealed Secrets
- apiGroups: ["bitnami.com"]
  resources: ["sealedsecrets"]
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: sealed-secrets-secret-manager
  namespace: monitoring
  labels:
    app: sealed-secrets-controller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: sealed-secrets-secret-manager
subjects:
- kind: ServiceAccount
  name: sealed-secrets-controller
  namespace: kube-system
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sealed-secrets-controller
  namespace: kube-system
  labels:
    app: sealed-secrets-controller
spec:
  replicas: 1
  selector:
    matchLabels:
      app: sealed-secrets-controller
  template:
    metadata:
      labels:
        app: sealed-secrets-controller
    spec:
      serviceAccountName: sealed-secrets-controller
      securityContext:
        runAsNonRoot: true
        runAsUser: 10001
        fsGroup: 10001
      containers:
      - name: sealed-secrets-controller
        image: bitnami/sealed-secrets-controller:v0.24.5
        imagePullPolicy: Always
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 10001
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        ports:
        - containerPort: 8080
          name: http
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        env:
        - name: SEALED_SECRETS_UPDATE_STATUS
          value: "true"
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: home
          mountPath: /home/sealed-secrets
        livenessProbe:
          httpGet:
            path: /healthz
            port: http
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /healthz
            port: http
          initialDelaySeconds: 5
          periodSeconds: 10
      volumes:
      - name: tmp
        emptyDir: {}
      - name: home
        emptyDir: {}
