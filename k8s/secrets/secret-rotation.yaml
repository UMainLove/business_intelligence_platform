---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: secret-rotator
  namespace: business-intelligence
  labels:
    app: secret-rotator
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: secret-rotator
  namespace: business-intelligence
  labels:
    app: secret-rotator
rules:
# Limited permissions for secret rotation - no create/delete
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list", "patch"]  # Removed 'update' for least privilege
  resourceNames: []  # Consider limiting to specific secret names
- apiGroups: ["bitnami.com"]
  resources: ["sealedsecrets"]
  verbs: ["get", "list", "patch"]
- apiGroups: [""]
  resources: ["events"]
  verbs: ["create", "patch"]  # For audit logging
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: secret-rotator
  namespace: business-intelligence
  labels:
    app: secret-rotator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: secret-rotator
subjects:
- kind: ServiceAccount
  name: secret-rotator
  namespace: business-intelligence
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: secret-rotation
  namespace: business-intelligence
  labels:
    app: secret-rotation
spec:
  schedule: "0 0 1 * *"  # Monthly on 1st at midnight
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 1
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: secret-rotator
          securityContext:
            runAsNonRoot: true
            runAsUser: 10002
            fsGroup: 10002
          containers:
          - name: secret-rotator
            image: bitnami/kubectl:1.28.4
            imagePullPolicy: Always
            securityContext:
              allowPrivilegeEscalation: false
              runAsNonRoot: true
              runAsUser: 10002
              readOnlyRootFilesystem: true
              capabilities:
                drop:
                - ALL
            command: ["/bin/sh", "-c"]
            args:
            - |
              echo "Starting secret rotation process..."
              
              # Get all sealed secrets
              kubectl get sealedsecrets -n business-intelligence -o json | \
              jq -r '.items[] | select(.metadata.annotations["rotation.bitnami.com/enabled"] == "true") | .metadata.name' | \
              while read secret; do
                echo "Rotating secret: $secret"
                kubectl annotate sealedsecret $secret rotation.bitnami.com/last-rotation="$(date -Iseconds)" -n business-intelligence --overwrite
              done
              
              echo "Secret rotation completed"
            volumeMounts:
            - name: tmp
              mountPath: /tmp
            resources:
              requests:
                memory: "64Mi"
                cpu: "50m"
              limits:
                memory: "128Mi"
                cpu: "100m"
          volumes:
          - name: tmp
            emptyDir: {}
          restartPolicy: OnFailure
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: secret-backup
  namespace: business-intelligence
  labels:
    app: secret-backup
spec:
  schedule: "0 3 * * *"  # Daily at 3 AM
  successfulJobsHistoryLimit: 7
  failedJobsHistoryLimit: 3
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: secret-rotator
          securityContext:
            runAsNonRoot: true
            runAsUser: 10003
            fsGroup: 10003
          containers:
          - name: secret-backup
            image: bitnami/kubectl:1.28.4
            imagePullPolicy: Always
            securityContext:
              allowPrivilegeEscalation: false
              runAsNonRoot: true
              runAsUser: 10003
              readOnlyRootFilesystem: true
              capabilities:
                drop:
                - ALL
            command: ["/bin/sh", "-c"]
            args:
            - |
              echo "Starting secret backup process..."
              
              # Create backup of all secrets and sealed secrets
              kubectl get secrets,sealedsecrets -n business-intelligence -o yaml > /backup/secrets-backup-$(date +%Y%m%d-%H%M%S).yaml
              
              echo "Secret backup completed"
            volumeMounts:
            - name: tmp
              mountPath: /tmp
            - name: backup
              mountPath: /backup
            resources:
              requests:
                memory: "64Mi"
                cpu: "50m"
              limits:
                memory: "128Mi"
                cpu: "100m"
          volumes:
          - name: tmp
            emptyDir: {}
          - name: backup
            emptyDir: {}
          restartPolicy: OnFailure
