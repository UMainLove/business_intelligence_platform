apiVersion: scheduling.k8s.io/v1
kind: PriorityClass
metadata:
  name: high-priority
value: 1000
globalDefault: false
description: "High priority class for monitoring infrastructure"

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: monitoring
  labels:
    app: prometheus
    component: monitoring
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
      retention.time: 30d
      retention.size: 50GB

    rule_files:
      - /etc/prometheus/rules/*.yml

    scrape_configs:
      - job_name: 'prometheus'
        static_configs:
          - targets: ['localhost:9090']

      - job_name: 'bi-platform'
        kubernetes_sd_configs:
          - role: pod
            namespaces:
              names:
                - business-intelligence
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_label_app]
            regex: bi-platform
            action: keep
          - source_labels: [__meta_kubernetes_pod_ip]
            regex: (.+)
            target_label: __address__
            replacement: ${1}:8501
          - source_labels: [__meta_kubernetes_pod_name]
            target_label: instance

      - job_name: 'postgres-exporter'
        kubernetes_sd_configs:
          - role: pod
            namespaces:
              names:
                - business-intelligence
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_label_app]
            regex: postgres-exporter
            action: keep

      - job_name: 'redis-exporter'
        kubernetes_sd_configs:
          - role: pod
            namespaces:
              names:
                - business-intelligence
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_label_app]
            regex: redis-exporter
            action: keep

    alerting:
      alertmanagers:
        - static_configs:
            - targets:
                - alertmanager:9093

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: monitoring
  labels:
    app: prometheus
    component: monitoring
    version: v2.40.0
  annotations:
    deployment.kubernetes.io/revision: "1"
    monitoring.coreos.com/scrape: "true"
    monitoring.coreos.com/port: "9090"
spec:
  replicas: 2  # High availability
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
        component: monitoring
        version: v2.40.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: prometheus
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534  # nobody user
        runAsGroup: 65534
        fsGroup: 65534
        seccompProfile:
          type: RuntimeDefault
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - prometheus
              topologyKey: kubernetes.io/hostname
      topologySpreadConstraints:
      - maxSkew: 1
        topologyKey: topology.kubernetes.io/zone
        whenUnsatisfiable: DoNotSchedule
        labelSelector:
          matchLabels:
            app: prometheus
      priorityClassName: high-priority
      containers:
        - name: prometheus
          image: prom/prometheus:v2.40.0
          imagePullPolicy: IfNotPresent
          args:
            - '--config.file=/etc/prometheus/prometheus.yml'
            - '--storage.tsdb.path=/prometheus/'
            - '--web.console.libraries=/usr/share/prometheus/console_libraries'
            - '--web.console.templates=/usr/share/prometheus/consoles'
            - '--web.enable-lifecycle'
            - '--storage.tsdb.retention.time=$(PROMETHEUS_RETENTION_TIME)'
            - '--storage.tsdb.retention.size=$(PROMETHEUS_RETENTION_SIZE)'
            - '--web.enable-admin-api'
            - '--web.route-prefix=/'
            - '--web.external-url=http://prometheus.monitoring:9090'
            - '--log.level=$(LOG_LEVEL)'
            - '--query.max-concurrency=$(PROMETHEUS_CONCURRENT_QUERIES)'
            - '--query.timeout=2m'
          ports:
            - name: http
              containerPort: 9090
              protocol: TCP
          env:
            - name: PROMETHEUS_RETENTION_TIME
              valueFrom:
                configMapKeyRef:
                  name: monitoring-config
                  key: prometheus.retention.time
            - name: PROMETHEUS_RETENTION_SIZE
              valueFrom:
                configMapKeyRef:
                  name: monitoring-config
                  key: prometheus.retention.size
            - name: ENVIRONMENT
              valueFrom:
                configMapKeyRef:
                  name: monitoring-env-config
                  key: ENVIRONMENT
            - name: LOG_LEVEL
              valueFrom:
                configMapKeyRef:
                  name: monitoring-env-config
                  key: LOG_LEVEL
            - name: PROMETHEUS_CONCURRENT_QUERIES
              valueFrom:
                configMapKeyRef:
                  name: monitoring-env-config
                  key: PROMETHEUS_CONCURRENT_QUERIES
          resources:
            requests:
              memory: 1Gi
              cpu: 200m
              ephemeral-storage: 1Gi
            limits:
              memory: 4Gi
              cpu: 2000m
              ephemeral-storage: 10Gi
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 65534
            capabilities:
              drop:
              - ALL
          volumeMounts:
            - name: prometheus-config
              mountPath: /etc/prometheus/
              readOnly: true
            - name: prometheus-storage
              mountPath: /prometheus/
            - name: prometheus-rules
              mountPath: /etc/prometheus/rules/
              readOnly: true
            - name: tmp
              mountPath: /tmp
            - name: prometheus-tmp
              mountPath: /prometheus/tmp
          livenessProbe:
            httpGet:
              path: /-/healthy
              port: 9090
            initialDelaySeconds: 30
            periodSeconds: 15
            timeoutSeconds: 10
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /-/ready
              port: 9090
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 5
            failureThreshold: 3
          startupProbe:
            httpGet:
              path: /-/ready
              port: 9090
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 30
      volumes:
        - name: prometheus-config
          configMap:
            name: prometheus-config
            defaultMode: 0444
        - name: prometheus-storage
          persistentVolumeClaim:
            claimName: prometheus-storage
        - name: prometheus-rules
          configMap:
            name: prometheus-rules
            defaultMode: 0444
        - name: tmp
          emptyDir: {}
        - name: prometheus-tmp
          emptyDir: {}
      terminationGracePeriodSeconds: 60
      dnsPolicy: ClusterFirst
      restartPolicy: Always

---
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: monitoring
  labels:
    app: prometheus
spec:
  type: ClusterIP
  ports:
    - port: 9090
      targetPort: 9090
      name: http
  selector:
    app: prometheus

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: prometheus-storage
  namespace: monitoring
  labels:
    app: prometheus
    component: monitoring
  annotations:
    volume.beta.kubernetes.io/storage-class: "fast"
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Gi  # Increased for production
  storageClassName: fast
  volumeMode: Filesystem

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus
  namespace: monitoring
  labels:
    app: prometheus
    component: monitoring
  annotations:
    description: "ServiceAccount for Prometheus monitoring"
automountServiceAccountToken: true

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus
  labels:
    app: prometheus
    component: monitoring
rules:
  - apiGroups: [""]
    resources:
      - nodes
      - nodes/proxy
      - nodes/metrics
      - services
      - endpoints
      - pods
      - configmaps
    verbs: ["get", "list", "watch"]
  - apiGroups: ["apps"]
    resources:
      - deployments
      - replicasets
      - daemonsets
      - statefulsets
    verbs: ["get", "list", "watch"]
  - apiGroups: ["extensions", "networking.k8s.io"]
    resources:
      - ingresses
    verbs: ["get", "list", "watch"]
  - apiGroups: ["monitoring.coreos.com"]
    resources:
      - servicemonitors
      - podmonitors
      - prometheusrules
    verbs: ["get", "list", "watch"]
  - nonResourceURLs: ["/metrics", "/metrics/cadvisor"]
    verbs: ["get"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus
  labels:
    app: prometheus
    component: monitoring
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus
subjects:
  - kind: ServiceAccount
    name: prometheus
    namespace: monitoring

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: prometheus-network-policy
  namespace: monitoring
  labels:
    app: prometheus
    component: monitoring
spec:
  podSelector:
    matchLabels:
      app: prometheus
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    - namespaceSelector:
        matchLabels:
          name: business-intelligence
    - podSelector: {}  # Allow from same namespace
    ports:
    - protocol: TCP
      port: 9090
  egress:
  - {} # Allow all egress for scraping targets

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: prometheus-pdb
  namespace: monitoring
  labels:
    app: prometheus
    component: monitoring
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: prometheus